name: Build on Windows

on:
    workflow_call:
        inputs:
            commit-sha:
                type: string
                required: true
        outputs:
            runid:
                value: ${{github.run_id}}
    workflow_dispatch:
        inputs:
            commit-sha:
                type: string
                description: Target commit
                required: true

jobs:
    x64:
        runs-on: windows-latest
        steps:

          - name: Checkout Wasmer
            uses: actions/checkout@v4
            with:
                repository: wasmerio/wasmer
                path: wasmer
                ref: ${{inputs.commit-sha}}
                submodules: recursive

          - name: Install Rust
            uses: dtolnay/rust-toolchain@v1
            with:
                toolchain: stable
                targets: x86_64-pc-windows-msvc

          - name: Setup MSVC Environment
            uses: ilammy/msvc-dev-cmd@v1
            with:
                arch: x64

          - name: Get LLVM 18 (I don't care about updating this section later. It's just too difficult to make the process general)
            shell: pwsh
            id: llvm
            run: |
                Invoke-WebRequest -Uri https://github.com/vovkos/llvm-package-windows/releases/download/llvm-18.1.8/llvm-18.1.8-windows-amd64-msvc17-libcmt.7z -OutFile llvm-18.1.8-windows-amd64-msvc17-libcmt.7z
                tar -xJf llvm-18.1.8-windows-amd64-msvc17-libcmt.7z
                $prefix = "${{github.workspace}}\llvm-18.1.8-windows-amd64-msvc17-libcmt"
                "LLVM_SYS_180_PREFIX=$prefix" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                "LLVM_CONFIG_PATH=$prefix\bin\llvm-config.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                "$prefix\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                cd llvm-build
                dir

          - name: Build Windows x64 Debug
            shell: pwsh
            run: |
                cd wasmer
                cargo rustc -p wasmer-c-api --target x86_64-pc-windows-msvc --no-default-features --features "llvm,wat" -- -Cdebuginfo=2 --crate-type=staticlib

          - name: Build Windows x64 Release
            shell: pwsh
            run: |
                cd wasmer
                cargo rustc -p wasmer-c-api --target x86_64-pc-windows-msvc --no-default-features --features "llvm,wat" --release -- --crate-type=staticlib

          - name: Compress Product
            shell: pwsh
            run: |
                echo ${{inputs.commit-sha}} >> VERSION.txt
                mkdir temp\include
                cp -r wasmer\lib\c-api\tests\wasm-c-api\include\* temp\include
                cp wasmer\lib\c-api\wasmer.h temp\include
                cp wasmer\lib\c-api\wasmer_wasm.h temp\include
                7z a wasmer_windows_x64_debug.7z .\wasmer\target\x86_64-pc-windows-msvc\debug\wasmer.lib .\wasmer\target\x86_64-pc-windows-msvc\debug\wasmer.pdb .\temp\include VERSION.txt
                7z a wasmer_windows_x64_release.7z .\wasmer\target\x86_64-pc-windows-msvc\release\wasmer.lib .\temp\include VERSION.txt

          - name: Upload Archive
            uses: actions/upload-artifact@v4
            with:
                name: wasmer_windows_x64
                path: |
                    *.7z
                retention-days: 7

    arm64:
        runs-on: windows-latest
        steps:

          - name: Checkout Wasmer
            uses: actions/checkout@v4
            with:
                repository: wasmerio/wasmer
                path: wasmer
                ref: ${{inputs.commit-sha}}
                submodules: recursive

          - name: Install Rust
            uses: dtolnay/rust-toolchain@v1
            with:
                toolchain: stable
                targets: aarch64-pc-windows-msvc

          - name: Setup MSVC Environment
            uses: ilammy/msvc-dev-cmd@v1
            with:
                arch: arm64

          - name: Resolve LLVM Version
            shell: pwsh
            id: llvm
            run: |
                cd wasmer
                $metajson = cargo metadata --format-version=1 --features "wasmer-c-api/llvm,wasmer-c-api/wat" --no-default-features | ConvertFrom-Json -AsHashTable
                $pkg = $metajson.packages | Where-Object { $_.name -eq "llvm-sys" } | Select-Object -First 1
                $sysVersion = [int]($pkg.version.Split('.')[0])
                $llvmMajor = [math]::Floor($sysVersion / 10)
                $llvmMinor = $sysVersion % 10
                "sysVersion=$sysVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                "llvmMajor=$llvmMajor" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                "llvmMinor=$llvmMinor" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

          - name: Build LLVM ${{steps.llvm.outputs.llvmMajor}}.${{steps.llvm.outputs.llvmMinor}}
            shell: pwsh
            run: |
                git clone https://github.com/llvm/llvm-project --depth 1 --branch release/${{steps.llvm.outputs.llvmMajor}}.x
                mkdir llvm-build
                $prefix = "${{github.workspace}}\llvm-build\Release"
                cmake -S llvm-project/llvm -B llvm-build -G "Visual Studio 17 2022" -A ARM64 -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_TARGETS_TO_BUILD="X86" -DCMAKE_INSTALL_PREFIX=$prefix -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_DOCS=OFF -DBUILD_SHARED_LIBS=OFF -DLLVM_BUILD_LLVM_DYLIB=OFF -DLLVM_ENABLE_ZLIB=OFF -DLLVM_ENABLE_TERMINFO=OFF
                cmake --build llvm-build --config Release --target install
                "LLVM_SYS_${{steps.llvm.outputs.sysVersion}}_PREFIX=$prefix" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                "LLVM_CONFIG_PATH=$prefix\bin\llvm-config.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                "$prefix\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                cd llvm-build
                dir

          - name: Build Windows arm64 Debug
            shell: pwsh
            run: |
                cd wasmer
                cargo rustc -p wasmer-c-api --target aarch64-pc-windows-msvc --no-default-features --features "llvm,wat" -- -Cdebuginfo=2 --crate-type=staticlib

          - name: Build Windows arm64 Release
            shell: pwsh
            run: |
                cd wasmer
                cargo rustc -p wasmer-c-api --target aarch64-pc-windows-msvc --no-default-features --features "llvm,wat" --release -- --crate-type=staticlib

          - name: Compress Product
            shell: pwsh
            run: |
                echo ${{inputs.commit-sha}} >> VERSION.txt
                mkdir temp\include
                cp -r wasmer\lib\c-api\tests\wasm-c-api\include\* temp\include
                cp wasmer\lib\c-api\wasmer.h temp\include
                cp wasmer\lib\c-api\wasmer_wasm.h temp\include
                7z a wasmer_windows_arm64_debug.7z .\wasmer\target\aarch64-pc-windows-msvc\debug\wasmer.lib .\wasmer\target\aarch64-pc-windows-msvc\debug\wasmer.pdb .\temp\include VERSION.txt
                7z a wasmer_windows_arm64_release.7z .\wasmer\target\aarch64-pc-windows-msvc\release\wasmer.lib .\temp\include VERSION.txt

          - name: Upload Archive
            uses: actions/upload-artifact@v4
            with:
                name: wasmer_windows_arm64
                path: |
                    *.7z
                retention-days: 7